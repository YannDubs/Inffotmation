# Show the objects in the 2D tsne representation
qplot(x=tsne_out$Y[,1], y=tsne_out$Y[,2],color=data_day[indexDay01]) +
labs(colour = "Cell Type", x = "tsne1", y = "tsne2") +
ggtitle("t-SNE only day 0 and 1") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5))
#will not be needed: don't keep big data
remove(tsne_out)
tsne_out <- Rtsne(dist(group_one_data), dims = 3) # Run TSNE in 3 dimensions
plot_ly(x=tsne_out$Y[,1],
y=tsne_out$Y[,2],
z=tsne_out$Y[,3],
type="scatter3d",
color=data_day[indexDay01],
mode="markers") %>%
layout(title = 't-SNE day 0 and 1 3D')
#will not be needed: don't keep big data
remove(tsne_out)
remove(group_one_data)
#tsne on Day 3/Day 7 cells only
indexDay37 <- which(data_day %in% c("Day 3","Day 7"))
#selecting only day 3 and day 7 cells
group_two_data <- alive_tsne_data[indexDay37, ]
# Run TSNE
tsne_out <- Rtsne(dist(group_two_data))
# Show the objects in the 2D tsne representation
qplot(x=tsne_out$Y[,1], y=tsne_out$Y[,2],color=data_day[indexDay37]) +
labs(colour = "Cell Type", x = "tsne1", y = "tsne2") +
ggtitle("t-SNE only day 3 and 7") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5))
#will not be needed: don't keep big data
remove(tsne_out)
remove(alive_tsne_data)
tsne_out <- Rtsne(dist(group_two_data), dims = 3) # Run TSNE in 3 dimensions
plot_ly(x=tsne_out$Y[,1],
y=tsne_out$Y[,2],
z=tsne_out$Y[,3],
type="scatter3d",
color=data_day[indexDay37],
mode="markers") %>%
layout(title = 't-SNE day 3 and 7 3D')
#will not be needed: don't keep big data
remove(tsne_out)
remove(group_two_data)
dge <- DGEList(counts=dataNZ, group = data_day)
# applies TMM normalization to dge
#dge <- calcNormFactors(dge)
data_voomed <- voom(dge,design,plot=TRUE)
#will not be needed: don't keep big data
remove(dge)
df <- data_voomed$E
dataf<- mutate(data.frame(t(df)), group = data_day) %>%
gather(mirna, exp, - group)
ggplot(dataf, aes(x=exp)) +
geom_histogram(aes(fill = group), colour = 'white')+
ggtitle("Distribution of counts with respect to the groups") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5))
#will not be needed: don't keep big data
remove(dataf)
remove(df)
# filtering out rows that have non zero counts in less than 30% of the samples
dataNZFilterd <-dataNZ[rowSums(dataNZ>=10)>=round(0.3*ncol(dataNZ)),]
dge <- DGEList(counts=dataNZFilterd, group = data_day)
#dge <- dge[isExpr,]
#dge <- calcNormFactors(dge)
data_voomed <- voom(dge,design,plot=TRUE)
#will not be needed: don't keep big data
remove(dge)
remove(dataNZFilterd)
data_voomed[1:2,1:10]
indexDay0 <- which(data_day == "Day 0")
indexDay1 <- which(data_day == "Day 1")
indexDay3 <- which(data_day == "Day 3")
indexDay7 <- which(data_day == "Day 7")
dataNZFilterdBis <- dataNZ[rowSums(dataNZ[,indexDay0]>=10)>=round(0.50*length(indexDay0)) |
rowSums(dataNZ[,indexDay1]>=10)>=round(0.50*length(indexDay1)) |
rowSums(dataNZ[,indexDay3]>=10)>=round(0.50*length(indexDay3)) |
rowSums(dataNZ[,indexDay7]>=10)>=round(0.50*length(indexDay7)) ,]
dge <- DGEList(counts=dataNZFilterdBis, group = data_day)
#dge <- calcNormFactors(dge)
data_voomed <- voom(dge,design,plot=TRUE)
df <- data_voomed$E
dataf<- mutate(data.frame(t(df)), group = data_day) %>%
gather(mirna, exp, - group)
ggplot(dataf, aes(x=exp)) +
geom_histogram(aes(fill = group), colour = 'white') +
ggtitle("Distribution of filtered counts with respect to the groups") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5))
#will not be needed: don't keep big data
remove(dataf)
remove(df)
data_group <- as.character(data_day)
data_group[data_group == "Day 0" | data_group == "Day 1"] <- "Day01"
data_group[data_group == "Day 3" | data_group == "Day 7"] <- "Day37"
#makes a data frame with all information
df <- data_voomed$E
dataf4 <- data.frame(df)
dataf4$mirna <- as.factor(rownames(dataf4))
dataf4 <- gather(dataf4,samples, exp,-mirna);
dataf4$group <-  as.factor(data_group);
dataf4$day <-  data_day;
dataf4 <- mutate(dataf4, interGroup = paste(as.character(dataf4$mirna),data_group) )
dataf4 <- mutate(dataf4, interGroup2 = paste(as.character(dataf4$mirna),as.character(data_day)) )
dataf4$exp2 <- 2^dataf4$exp-0.5
randRNA <- unique(dataf4$mirna)[sample(1:length(unique(dataf4$mirna)), 12, replace=FALSE)]
ggplot(dataf4[dataf4$mirna %in% randRNA,], aes(x=exp, fill = group)) +
geom_density(alpha=0.5) +
ggtitle("Random density plot for interaction miRNA-group") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5)) +
theme(legend.position="none") + xlim(0,30) +
facet_wrap(~mirna,nrow = 4,ncol = 3)
#will not be needed: don't keep big data
remove(df)
ggplot(dataf4[dataf4$mirna %in% randRNA,], aes(x=exp2, fill = group)) +
geom_density(alpha=0.5) +
ggtitle("Random density plot for interaction miRNA-group: no log") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5)) +
theme(legend.position="none") + xlim(-500,10000) +
facet_wrap(~mirna,nrow = 5,ncol = 3)
# Convert population to a numeric variable.
Pop.num<-as.numeric(substr(n_meta_data$Population,6,6))
n_meta_data<-cbind(n_meta_data,Pop.num)
des.pop.num<-model.matrix(~Pop.num,n_meta_data)
v.pop.num<-voom(dge,des.pop.num, plot=FALSE)
# Next, fit linear model with day as a factor.
fit.pop.num <- lmFit(v.pop.num,des.pop.num)
efit.pop.num <- eBayes(fit.pop.num)
# store result
top.pop.num<-topTable(efit.pop.num,number=Inf)
# Look at table with top genes.
top.pop.num[1:10,]
fdr.pop.num<-nrow(subset(top.pop.num,adj.P.Val<0.01))
remove(v.pop.num)
hist(top.pop.num$adj.P.Val,breaks=29,main="Q-value Histogram - Day as numeric",xlab="Q-Value")
hist(top.pop.num$P.Value,breaks=29,main="P-value Histogram - Day as numeric",xlab="P-Value")
remove(top.pop.num)
des.pop.char<-model.matrix(~Population,n_meta_data)
v.pop.char<-voom(dge,des.pop.char, plot=FALSE)
fit.pop.char <- lmFit(v.pop.char,des.pop.char)
efit.pop.char <- eBayes(fit.pop.char)
top.pop.char<-topTable(efit.pop.char,number=Inf)
plotSA(efit.pop.char,main="Final Mean-Variance plot")
#will not be needed: don't keep big data
remove(fit)
remove(v.pop.char)
top.pop.char[1:10,]
fdr.pop.char<-nrow(subset(top.pop.char,adj.P.Val<0.01))
hist(top.pop.char$adj.P.Val,breaks=29,main="Q-value Histogram - Population as a factor",xlab="Q-Value")
hist(top.pop.char$P.Value,breaks=29,main="P-value Histogram - Population as a factor",xlab="P-Value")
remove(top.pop.char)
gsub("HL60D0","Day 0 or 1",n_meta_data$Population)
levels(n_meta_data$Population)
cluster<-character()
for(x in n_meta_data$Population){
if(x == "HL60D0"){
cluster<-append(cluster,"Day 0 or 1")
}
if(x == "HL60D1"){
cluster<-append(cluster,"Day 0 or 1")
}
if(x == "HL60D3"){
cluster<-append(cluster,"Day 3 or 7")
}
if(x == "HL60D7"){
cluster<-append(cluster,"Day 3 or 7")
}
}
n_meta_data<-cbind(n_meta_data,cluster) #make factor for cluster
des.cluster<-model.matrix(~cluster,n_meta_data)
v.cluster<-voom(dge,des.cluster, plot=FALSE)
fit.cluster <- lmFit(v.cluster,des.cluster)
efit.cluster <- eBayes(fit.cluster)
top.cluster<-topTable(efit.cluster,number=Inf)
fdr.cluster<-subset(top.cluster,adj.P.Val<0.01)
top.cluster[1:10,]
remove(v.cluster)
remove(efit.cluster)
hist(top.cluster$adj.P.Val,breaks=19,main="Q-value Histogram - Cluster as a factor",xlab="Q-Value")
hist(top.cluster$P.Value,breaks=19,main="P-value Histogram - Cluster as a factor",xlab="P-Value")
# Define plotting function
cluster1<-gsub("HL60D0","Day 0 or 1",n_meta_data$Population)
cluster1<-gsub("HL60D1","Day 0 or 1",cluster1)
cluster1<-gsub("HL60D3","Day 3 or 7",cluster1)
cluster1<-gsub("HL60D7","Day 3 or 7",cluster1)
meta2<-cbind(n_meta_data,cluster1)
#function which combines expression data with metaData
prepareData2 <- function(genes) {
miniDat <-  subset(dataNZ, rownames(dataNZ) %in% genes)
miniDat <- data.frame(gExp = as.vector(t(as.matrix(miniDat))),
gene = factor(rep(rownames(miniDat), each = ncol(miniDat)),
levels = genes))
miniDat <- suppressWarnings(data.frame(meta2, miniDat))
return(miniDat)
}
topGenes <- rownames(top.cluster[1:10,])
prepDatTop<-prepareData2(topGenes) #format data
ggplot(data=subset(prepDatTop,prepDatTop$gene==topGenes[1]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(topGenes[1]) +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5))
remove(top.cluster)
fit <- lmFit(data_voomed, design)
fit <- contrasts.fit(fit, contrasts=contrastMatrix)
efit <- eBayes(fit)
dt <- decideTests(efit)
summary(dt)
nInversD1D3D7 <- nrow(dt[(dt[,4] * dt[,6]== -1), ])
nSameD1D3D7 <- nrow(dt[(dt[,4] * dt[,6]== 1), ])
nTotalD1D3D7 <- nrow(dt[dt[,4] != 0 | dt[,6] != 0,c(4,6)])
vennDiagram(dt[dt[,4] != 0 | dt[,6] != 0,c(4,6)], circle.col=c("turquoise", "salmon", "green","yellow"), main = "Venn diagramm differentially expressed D1-D3 and D3-7")
# Finding genes that are differntailly expressed in the opposite direction between d1-3 and d3-7
commonDEgenesInverseDay1337 <- which(dt[,4]*dt[,6] == -1)
names(commonDEgenesInverseDay1337)
# Finding genes that are differntailly expressed in the opposite direction between d1-3 and d3-7
commonDEgenesInverseDay1337not01 <- which(dt[,4]*dt[,6] == -1 & dt[,1] == 0)
names(commonDEgenesInverseDay1337not01)
randRNA <- unique(names(commonDEgenesInverseDay1337not01))[sample(1:length(unique(names(commonDEgenesInverseDay1337not01))), 4, replace=FALSE)]
prepDatTop<-prepareData2(randRNA) #format data
f1 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[1]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[1])
f2 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[2]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[2])#106b-5p
f3 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[3]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[3])
f4 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[4]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[4])
grid.arrange(f1,f2,f3,f4,nrow=2) #put plots together
# Finding genes that are not zero in at least one comparaison between the groups
commonDEgenesDay0137 <- which(dt[,2]!=0 & dt[,3]!=0 & dt[,4]!=0 & dt[,5]!=0)
names(commonDEgenesDay0137)
vennDiagram(dt[,2:5], circle.col=c("turquoise", "salmon", "green","yellow"), main = "Venn diagramm showing differences between clusters")
#List of genes different between the two clusters
topGenes <- names(commonDEgenesDay0137)
#topGenes<-c("hsa-let-7d-3p","hsa-let-7i-5p","hsa-miR-125a-5p","hsa-miR-132-3p","hsa-miR-143-3p","hsa-miR-145-5p","hsa-miR-181b-3p","hsa-miR-185-5p","hsa-miR-192-5p","hsa-miR-19b-3p","hsa-miR-223-3p","hsa-miR-23a-3p","hsa-miR-26a-5p","hsa-miR-30e-5p","hsa-miR-425-5p","hsa-miR-425-3p","hsa-miR-92a-3p")
prepDatTop<-prepareData2(topGenes) #format data
#make dataset for probe 125a - remove cell with top expression
p125<-subset(prepDatTop,prepDatTop$gene==topGenes[6])
p125<-p125[-which(p125$gExp==max(p125$gExp)),]
f1 <- ggplot(data=p125,aes(cluster1,gExp,colour=Population))+
geom_jitter()+
ggtitle(topGenes[6]) + ylim(-100,2000)
f2 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==topGenes[1]),aes(cluster1,gExp,colour=Population))+
geom_jitter()+
ggtitle(topGenes[16]) + ylim(-100,2000)
f3 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==topGenes[2]),aes(cluster1,gExp,colour=Population))+
geom_jitter()+
ggtitle(topGenes[5])+ ylim(-100,2000)#106b-5p
f4 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==topGenes[3]),aes(cluster1,gExp,colour=Population))+
geom_jitter()+
ggtitle(topGenes[1]) + ylim(-100,2000)
grid.arrange(f1,f2,f3,f4,nrow=2) #put plots together
# Finding genes that are differentially expressed between clusters but not whithin clusters
commonDEgenesBetweenNotWhithin <- which(dt[,2]!=0 & dt[,3]!=0 & dt[,4]!=0 & dt[,5]!=0 & dt[,1]==0 & dt[,6]==0)
names(commonDEgenesBetweenNotWhithin)
ggplot(dataf4[dataf4$mirna %in% names(commonDEgenesBetweenNotWhithin),], aes(x=exp, fill = group)) +
geom_density(alpha=0.5) +
ggtitle("Random point plot for interaction miRNA-group") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5)) +
theme(legend.position="none") + xlim(0,30) +
facet_wrap(~mirna,ncol = 3)
ggplot(dataf4[dataf4$mirna %in% names(commonDEgenesBetweenNotWhithin),], aes(x=exp2, fill = group)) +
geom_density(alpha=0.5) +
ggtitle("Random density plot for interaction miRNA-group: no log") +
theme_bw() +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5)) +
theme(legend.position="none") + xlim(-500,10000) +
facet_wrap(~mirna,ncol = 3)
randRNA <- unique(names(commonDEgenesBetweenNotWhithin))[sample(1:length(unique(names(commonDEgenesBetweenNotWhithin))), 4, replace=FALSE)]
prepDatTop<-prepareData2(randRNA) #format data
f1 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[1]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[1])
f2 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[2]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[2])#106b-5p
f3 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[3]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[3])
f4 <- ggplot(data=subset(prepDatTop,prepDatTop$gene==randRNA[4]),aes(cluster,gExp,colour=Population))+
geom_jitter()+
ggtitle(randRNA[4])
grid.arrange(f1,f2,f3,f4,nrow=2) #put plots together
dataInitial <- read.table("../Data/raw_data/expn_matrix.txt", header = TRUE, row.names = 1)
data_dayDESeq <- as.character(meta_data$Population)
data_dayDESeq <- recode(data_dayDESeq, "HL60D0" = "Day 0", "HL60D1" = "Day 1", "HL60D3" = "Day 3", "HL60D7" = "Day 7")
data_dayDESeq <-factor(data_dayDESeq)
deSeqDat <- newCountDataSet(dataInitial, data_dayDESeq)
# Note: actually it's not a real normalisation. Rather computing size factors depending on ratio of medians
# if all size factors are roughly equal to one, the libraries have been sequenced equally deeply.
deSeqDat <- estimateSizeFactors(deSeqDat)
head(sizeFactors(deSeqDat))
idx.nz <- apply(counts(deSeqDat), 1, function(x) { all(x > 0)})
nNZsamples <- sum(idx.nz)
#will not be needed: don't keep big data
remove(dataInitial)
#plotting the estimated dispersions against the mean normalized counts
deSeqDat <- estimateDispersions(deSeqDat)
plotDispEsts(deSeqDat)
multidensity( counts(deSeqDat, normalized = T),xlab="mean counts", xlim=c(0, 1000))
multiecdf( counts(deSeqDat, normalized = T),xlab="mean counts", xlim=c(0, 1000))
#working ... HOW TO USE DATADESEQ ON NORMALIZED => NOT COUNTS ANY MORE?? + IS IT WORTH IT ? cAN we round ?
#dataDESeq <- rlog(as.matrix(data), blind=FALSE )
#takes only genes that are non zero in many samples
#t <- n_data[which(rowSums(n_data) > 300),]
#tries plotting directly without voom
mSqrt4 <- rowMeans(dataNZFilterdBis^0.4)
RowSigmaSqrt16 <- function(x) {
(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))^(1/16)
}
v <- RowSigmaSqrt16(dataNZFilterdBis^0.4)
dataNoLog <- data.frame(meanSqrt4 = mSqrt4, sigmaSqrt16 = v)
ggplot(dataNoLog, aes(x=meanSqrt4, y=sigmaSqrt16)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth(method=loess,   # Add loess regression line
se=FALSE,
colour = "red") + # Don't add shaded confidence region
ylim(0, 2) +
xlim(0,20) +
ggtitle("Mean variance relationship not Voom") +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5))
data_voomed$E <- (2^data_voomed$E - 0.5)^0.4
loessFit <- loess ( sigmaSqrt16~meanSqrt4, dataNoLog)
loessPredict  <- predict (loessFit, dataNoLog$meanSqrt4)
weights <- 1/(loessPredict)^16
data_voomed$weights <- weights
fit <- lmFit(data_voomed, design)
fit <- contrasts.fit(fit, contrasts=contrastMatrix)
efit <- eBayes(fit)
topTable(efit, coef=colnames(coef(efit)))
plotSA(efit)
#will not be needed: don't keep big data
remove(fit)
remove(data_voomed)
dt <- decideTests(efit)
summary(dt)
# Finding genes that are not zero in every comparaison with day 0
commonDEgenesDay0 <- which(dt[,1]!=0 & dt[,2]!=0 & dt[,3]!=0)
names(commonDEgenesDay0)
vennDiagram(dt[,1:3], circle.col=c("turquoise", "salmon", "green"), main = "Venn diagramm showing differences with day 0")
# Finding genes that are not zero in every comparaison with day 0
commonDEgenesDay0137 <- which(dt[,2]!=0 & dt[,3]!=0 & dt[,4]!=0 & dt[,5]!=0)
names(commonDEgenesDay0137)
vennDiagram(dt[,2:5], circle.col=c("turquoise", "salmon", "green","yellow"),main = "Venn diagramm showing differences between clusters")
# Finding genes that are differentially expressed between clusters but not whithin clusters
commonDEgenesBetweenNotWhithin <- which(dt[,2]!=0 & dt[,3]!=0 & dt[,4]!=0 & dt[,5]!=0 & dt[,1]==0 & dt[,6]==0)
names(commonDEgenesBetweenNotWhithin)
ggplot(dataf4[dataf4$mirna %in% names(commonDEgenesBetweenNotWhithin),], aes(x=exp2, fill = group)) +
geom_density(alpha=0.5) +
ggtitle("Random point plot for interaction miRNA-group") +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5)) +
theme(legend.position="none") + xlim(0,30) +
facet_wrap(~mirna,ncol = 3)
ggplot(dataf4[dataf4$mirna %in% names(commonDEgenesBetweenNotWhithin),], aes(x=exp2, fill = group)) +
geom_density(alpha=0.5) +
ggtitle("Random density plot for interaction miRNA-group: no log") +
theme(text = element_text(size=14),plot.title = element_text(hjust = 0.5)) +
theme(legend.position="none") + xlim(-500,10000) +
facet_wrap(~mirna,ncol = 3)
#will not be needed: don't keep big data
remove(dataf4)
library(ggplot2)
library(ggplot2)
library(dplyr)
source('~/Desktop/GitHub/team_The-Zoo-Crew/SRC/data_processing_script.r', echo=TRUE)
library(gplots)
source('~/Desktop/GitHub/team_The-Zoo-Crew/SRC/data_processing_script.r', echo=TRUE)
library(ggplot2)
library(dplyr)
library(gplots)
library(RColorBrewer)
library(limma)
library(pheatmap)
library(viridis)
library(Rtsne)
meta_data <- read.table("meta_data.txt", header = TRUE)
data <- read.table("expn_matrix.txt", header = TRUE, row.names = 1)
spike_data <- read.table("expn_matrix_spike.txt", header = TRUE, row.names = 1)
test <- read.csv("data/player_stats_sofifa.csv",header = TRUE)
setwd("~/Desktop/GitHub/Infootmation/data")
test <- read.csv("data/player_stats_sofifa.csv",header = TRUE)
test <- read.csv("data/player_stats_sofifa.csv",header = TRUE)
test <- read.csv("data/player_stats.csv",header = TRUE)
setwd("~/Desktop/GitHub/Infootmation")
test <- read.csv("data/player_stats_sofifa.csv",header = TRUE)
test$position
test[test$position = "RES",]
test[test$position == "RES",]
test$position %<>% recode("CAM"="Centre Attacking Midfielder",
"CB"="Centre Back",
"CDM"="Center Defensive Midfielder",
"CF"="Centre Forward",
"CM"="Centre Midfield",
"GK"="Goalkeeper",
"LAM"="Left Attacking Midfielder",
"LB"="Left Back",
"LCB"="Left Centre Back",
"LCM"="Left Centre Midfielder",
"LDM"="Left Defensive Midfielder",
"LF"="Left Forward",
"LM"="Left Midfield",
"LS"="Left Striker",
"LW"="Left Wing",
"RAM"="Right Attacking Midfielder",
"RB"="Right Back",
"RCB"="Right Centre Back",
"RDM"="Right Defensive Midfielder",
"RES"="Reserve",
"RF"="Right Forward",
"RM"="Right Midfield",
"RS"="Right Striker",
"RW"="Right Wing",
"RWB"="Right Wing Back",
"ST"="Striker",
"SUB"="Substitute")
library(dplyr)
library(tidyr)
test$position %<>% recode("CAM"="Centre Attacking Midfielder",
"CB"="Centre Back",
"CDM"="Center Defensive Midfielder",
"CF"="Centre Forward",
"CM"="Centre Midfield",
"GK"="Goalkeeper",
"LAM"="Left Attacking Midfielder",
"LB"="Left Back",
"LCB"="Left Centre Back",
"LCM"="Left Centre Midfielder",
"LDM"="Left Defensive Midfielder",
"LF"="Left Forward",
"LM"="Left Midfield",
"LS"="Left Striker",
"LW"="Left Wing",
"RAM"="Right Attacking Midfielder",
"RB"="Right Back",
"RCB"="Right Centre Back",
"RDM"="Right Defensive Midfielder",
"RES"="Reserve",
"RF"="Right Forward",
"RM"="Right Midfield",
"RS"="Right Striker",
"RW"="Right Wing",
"RWB"="Right Wing Back",
"ST"="Striker",
"SUB"="Substitute")
library(dplyr)
library(tidyr)
library(RSQLite)
library(tibble)
library(magrittr)
test$position %<>% recode("CAM"="Centre Attacking Midfielder",
"CB"="Centre Back",
"CDM"="Center Defensive Midfielder",
"CF"="Centre Forward",
"CM"="Centre Midfield",
"GK"="Goalkeeper",
"LAM"="Left Attacking Midfielder",
"LB"="Left Back",
"LCB"="Left Centre Back",
"LCM"="Left Centre Midfielder",
"LDM"="Left Defensive Midfielder",
"LF"="Left Forward",
"LM"="Left Midfield",
"LS"="Left Striker",
"LW"="Left Wing",
"RAM"="Right Attacking Midfielder",
"RB"="Right Back",
"RCB"="Right Centre Back",
"RDM"="Right Defensive Midfielder",
"RES"="Reserve",
"RF"="Right Forward",
"RM"="Right Midfield",
"RS"="Right Striker",
"RW"="Right Wing",
"RWB"="Right Wing Back",
"ST"="Striker",
"SUB"="Substitute")
View(test)
View(test)
test$tea,
test$team
write.csv(test,"data/player_stats_sofifa.csv", row.names = F)
View(test)
gsub("k","e3",test$wage)
gsub("K","e3",test$wage)
gsub("M","e6",test$wage)
test$wage
typeof(test$wage)
test$wage[1]
test$wage[1]-test$wage[2]
test$value
test$wage <- gsub("M","e6",test$wage)
test$wage <- gsub("K","e3",test$wage)
test$value <- gsub("K","e3",test$value)
test$value <- gsub("M","e6",test$value)
write.csv(test,"data/player_stats_sofifa.csv", row.names = F)
View(test)
test$wage <- gsub("e6","M",test$wage)
test$wage <- gsub("e3","K",test$wage)
test$value <- gsub("e3","K",test$value)
test$value <- gsub("e6","M",test$value)
write.csv(test,"data/player_stats_sofifa.csv", row.names = F)
View(test)
